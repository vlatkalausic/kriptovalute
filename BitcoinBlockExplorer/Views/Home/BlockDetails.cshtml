@model BitcoinBlockExplorer.Models.Block

@{
    ViewData["Title"] = "View";
}

<h1></h1>

<div>
    <br /><br />
    <h4><b>Block - <span style="color: #1E90FF">@Model.height</span></b></h4>

    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Hash:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.hash)
        </dd>
        <dt class="col-sm-2">
            Confirmations:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.confirmations)
        </dd>
        <dt class="col-sm-2">
            Timestamp:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.time)
        </dd>
        <dt class="col-sm-2">
            Height:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.height)
        </dd>
        <dt class="col-sm-2">
            Miner:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.miner)
        </dd>
        <dt class="col-sm-2">
            Number of transactions:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.nTx)
        </dd>
        <dt class="col-sm-2">
            Difficulty:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.difficulty)
        </dd>
        <dt class="col-sm-2">
            Merkle root:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.merkleroot)
        </dd>
        <dt class="col-sm-2">
            Version:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.version)
        </dd>
        <dt class="col-sm-2">
            Version Hex:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.versionHex)
        </dd>
        <dt class="col-sm-2">
            Bits:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.bits)
        </dd>
        <dt class="col-sm-2">
            Weight:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.weight) WU
        </dd>
        <dt class="col-sm-2">
            Size:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.size) bytes
        </dd>
        <dt class="col-sm-2">
            Nonce:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.nonce)
        </dd>
        <dt class="col-sm-2">
            Transaction volume:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.transactionVolume)
        </dd>
        <dt class="col-sm-2">
            Block reward:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.blockReward)
        </dd>
        <dt class="col-sm-2">
            Fee reward:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.feeReward)
        </dd>
        <dt class="col-sm-2">
            Previous block hash:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.previousblockhash)
        </dd>
        <dt class="col-sm-2">
            Next block hash:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.nextblockhash)
        </dd>
    </dl>
</div>
<br />
<h5><b>Block Transactions</b></h5>
<hr />

@for (int i = 0; i < Model.transactions.Count; i++)
{
<div>

    <div style="color:orangered;"><b>Hash: </b>@Html.DisplayFor(model => model.transactions[i].txid)</div>
    <br />

    <div class="leftDiv">
        <p><b>INPUTS</b>&nbsp;</p>
        @for (int j = 0; j < Model.transactions[i].vin.Count; j++)
        {
            var x = Decimal.Round(Model.transactions[i].vin[j].value * ViewBag.USD, 2, MidpointRounding.AwayFromZero);
            @Html.DisplayFor(model => model.transactions[i].vin[j].address) <span style="background-color:lightgreen;color:black;border:solid">-></span>
            <span style="color:dimgrey">  @Model.transactions[i].vin[j].value BTC / @x USD</span>

            <br />
        }<br /><br />

        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <b> TOTAL INPUT: </b> @Model.transactions[i].ukupnoUlaz BTC / @Decimal.Round(Model.transactions[i].ukupnoUlaz * ViewBag.USD, 2, MidpointRounding.AwayFromZero) USD
        <br />
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <b>FEE: </b> @Model.transactions[i].fee BTC / @Decimal.Round(Model.transactions[i].fee * ViewBag.USD, 2, MidpointRounding.AwayFromZero) USD


    </div>

    <div class="rightDiv">
        <p><b>OUTPUTS</b>&nbsp;</p>
        @for (int j = 0; j < Model.transactions[i].vout.Count; j++)
        {
            var y = Decimal.Round(Model.transactions[i].vout[j].value * ViewBag.USD, 2, MidpointRounding.AwayFromZero);
            @Html.DisplayFor(model => model.transactions[i].vout[j].scriptPubKey.addresses) <span style="background-color:yellow;color:black;border:solid">-></span>
            <span style="color:dimgrey"> @Html.DisplayFor(model => model.transactions[i].vout[j].value) BTC / @y USD </span>

            <br />
        }
        <br /><br />
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <b>TOTAL OUTPUT:</b> @Model.transactions[i].ukupnoIzlaz BTC / @Decimal.Round(Model.transactions[i].ukupnoIzlaz * ViewBag.USD, 2, MidpointRounding.AwayFromZero) USD
    </div>
    
</div>

    <br />
    <br />
    <br />
 
    <hr style="clear:both;">


}



<style type="text/css">
    dd {
        color: orangered;
    }

    .leftDiv {
        overflow: hidden;
        height: 1%;
        width: 50%;
        float: left;
        background-color: lightyellow;
    }

    .rightDiv {
        overflow: hidden;
        height: 1%;
        width: 50%;
        float: right;
        background-color: lightgreen;
    }

</style>